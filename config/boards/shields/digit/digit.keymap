#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "util.h"
&lt {
    tapping-term-ms = <150>;
    quick-tap-ms = <100>;
    flavor = "hold-preferred";
    };
&mt {
    tapping-term-ms = <150>;
    flavor = "tap-preferred";
    };
&sk {
    release-after-ms = <10000>;
    quick-release;
    };
#define arstneio 0
#define num 1
#define nav 2
#define media 3 
#define blt 4
/ {
    combos {
            compatible ="zmk,combos";
            combo_num {
               timeout-ms = <100>;
               key-positions = <0 1 2 3>;
               layers = <arstneio nav media blt>;
               bindings = <&to num>;
            };
            combo_nav {
               timeout-ms = <100>;
               key-positions = <4 5 6 7>;
               layers = <arstneio num media blt>;
               bindings = <&to nav>;
            };
            combo_media {
               timeout-ms = <100>;
               key-positions = <0 1 2 3 4 5 6 7 8 9 0>;
               layers = <arstneio nav num blt>;
               bindings = <&to media>;
            };
               combo_blt {
               timeout-ms = <100>;
               key-positions = <3 4 8 9>;
               layers = <arstneio nav media num>;
               bindings = <&to blt>;
            };    
             combo_ent {
                timeout-ms = <100>;
                key-positions = <8 9>;
                bindings = <&mt ESC ENTER>;
            };
             combo_alt {
               timeout-ms = <100>;
               key-positions = <0 3 8>;
               bindings = <&kt LALT>;
            };
             combo_back {
               timeout-ms = <100>;
               key-positions = <0 7>;
               bindings = <&kp BSPC>;
            };
              combo_rst {
               timeout-ms = <100>;
               key-positions = <0 1 2 3 4 5 6  7>;
               bindings = <&reset>;
            };
              combo_bsword {
               timeout-ms = <100>;
               key-positions = <0 7 9>;
               bindings = <&kp LC(BSPC)>;
            };
            combo_ctrl {
               timeout-ms = <100>;
               key-positions = <1 3 8>;
               bindings = <&kt LCTRL>;
            };
               combo_tab {
               timeout-ms = <100>;
               key-positions = <2 3 8>;
               bindings = <&kp TAB>;
            };
               combo_win {
               timeout-ms = <100>;
               key-positions = <0 1 8>;
               bindings = <&kp LGUI>;
            };
               combo_comma {
               timeout-ms = <100>;
               key-positions = <2 5>;
               layers = <num arstneio>;
               bindings = <&kp COMMA>;
            };
               
               string_sim {
               timeout-ms = <200>;
               key-positions = <2 4 6>;
               layers = <arstneio>;
               bindings = <&string_sim>;
            };
            COMBOL(dt, &kp DOT,arstneio, 1 6)
            COMBOL(scln, &kp COLON,arstneio nav num, 6 7)
            COMBOL(ww, &kp W,arstneio , 0 1)
            COMBOL(xx, &kp X,arstneio , 0 2)
            COMBOL(pp, &kp P,arstneio , 0 3)
            COMBOL(jj, &kp J,arstneio , 0 4)
            COMBOL(qq, &kp Q,arstneio , 0 5)
            COMBOL(lbrac, &kp LPAR,arstneio nav num, 0 6)
            COMBOL(ff, &kp F,arstneio , 1 2)
            COMBOL(cc, &kp C,arstneio , 1 3)
            COMBOL(kk, &kp K,arstneio , 1 4)
            COMBOL(zz, &kp Z,arstneio , 1 5)
            COMBOL(rbrac, &kp RPAR,arstneio nav num, 1 7)
            COMBOL(dd, &kp D,arstneio , 2 3)
            COMBOL(mm, &kp M,arstneio , 2 4)
            COMBOL(minus, &kp MINUS,arstneio nav num, 2 6)
            COMBOL(apos, &kp APOS,arstneio nav num, 2 7)
            COMBOL(bb, &mt N9 B,arstneio , 3 4)
            COMBOL(gesc, &gresc,nav ,2 5)

            COMBOL(nu9, &mt F9 N9,num, 3 4)
            COMBOL(vv, &mt N0 V,arstneio , 3 5)
            COMBOL(nten, &mt F10 N0,media, 3 5)
            COMBOL(gg, &kp G,arstneio, 3 6)
            COMBOL(quest, &mt EQUAL QMARK,arstneio nav num, 3 7)
            COMBOL(hh, &mt NON_US_HASH H,arstneio , 4 5)
            COMBOL(yy, &kp Y,arstneio , 4 6)
            COMBOL(ll, &kp L,arstneio , 4 7)
            COMBOL(uu, &kp U,arstneio , 4 7)
            COMBOL(exc, &kp EXCL,arstneio num, 5 7)
            COMBOL(slash, &kp SLASH,arstneio num, 2 4 7)
            COMBOL(bslash, &kp BSLH,arstneio num, 2 4 7 8)
            COMBOL(home, &kp HOME,arstneio nav num, 4 9)
            COMBOL(end, &kp END,arstneio nav num, 7 9)
            COMBOL(ribr, &kp RBKT,arstneio nav num, 1 7 8)
            COMBOL(lebr, &kp LBKT,arstneio nav num, 0 6 8)
            COMBOL(play, &kp C_PLAY, media, 0 3)
            COMBOL(mute, &kp C_MUTE, media, 2 4)
            COMBOL(string_the, &string_the,arstneio, 3 4 5)
            COMBOL(string_there, &string_there,arstneio, 1 3 4 5)
            COMBOL(string_and, &string_and,arstneio, 0 3 4)
            COMBOL(string_you, &string_you,arstneio, 4 5 6)
            COMBOL(string_vim, &string_vim,arstneio, 3 5 6)
            COMBOL(string_ing, &string_ing,arstneio, 3 4 6)
            COMBOL(string_for, &string_for,arstneio num, 1 2 7)
            COMBOL(string_ion, &string_ion,arstneio, 4 6 7)
            COMBOL(string_star, &string_star,arstneio, 1 2 3)
            COMBOL(string_cluster, &string_cluster,arstneio, 1 3 4 7)
            COMBOL(string_while, &string_while,arstneio, 0 1 4 5)
            COMBOL(string_ight, &string_ight,arstneio, 3 4 5 6)
            COMBOL(string_particle, &string_particle,arstneio, 0 1 3 4 7)
            COMBOL(string_ould, &string_ould,arstneio, 5 6 7)
            COMBOL(string_ough, &string_ough,arstneio, 1 2 5 6)
            COMBOL(string_hydrodynamics, &string_hydrodynamics ,arstneio, 2 3 4 5 9)
            COMBOL(string_interest, &string_interest,arstneio, 4 5 6 9)
            COMBOL(string_function, &string_function,arstneio, 1 2 5 6 9)
            COMBOL(string_have, &string_have,arstneio, 0 3 5)
            COMBOL(string_that, &string_that,arstneio, 0 3 4 5)
            COMBOL(string_with, &string_with,arstneio, 0 1 6)
            COMBOL(string_what, &string_what,arstneio, 0 1 3 7)
            COMBOL(string_who, &string_who,arstneio, 0 1 7)
            COMBOL(string_which, &string_which,arstneio, 0 1 3)
            COMBOL(string_make, &string_make,arstneio, 0 1 2 4)
            COMBOL(string_real, &string_real,arstneio, 1 4 7)
            COMBOL(string_take, &string_take,arstneio, 0 1 3 4)
            COMBOL(string_good, &string_good,arstneio, 2 3 6 7)
            COMBOL(string_done, &string_done,arstneio, 2 3 4 7)
            COMBOL(string_ound, &string_ound,arstneio, 2 3 5 6 7)
            COMBOL(string_ause, &string_ause,arstneio, 0 2 5 6)
            COMBOL(string_had, &string_had,arstneio, 2 3 4 5)
            COMBOL(string_print, &string_print,arstneio, 0 1 3 6)
            COMBOL(string_wq, &string_wq,arstneio nav num, 0 1 5)
            COMBOL(string_particle, &string_particle,arstneio, 0 1 3 4 7)
            COMBOL(string_just, &string_just,arstneio, 2 3 4)
            COMBOL(string_those, &string_those,arstneio, 3 4 5 7)
            COMBOL(string_first, &string_first,arstneio, 1 2 6)
            COMBOL(string_this, &string_this,arstneio, 2 3 4 5 8)
            COMBO(combo_ctrlC, &kp LC(C), 2 8)
            COMBO(combo_ctrlV, &kp LC(V), 3 8)
            COMBO(combo_ctrlS, &kp LC(S), 1 2 3 8)
    };


     behaviors {
             ZMK_MACRO(string_sim,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp S>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp I &kp M &kp U &kp L &kp A &kp T &kp I &kp O &kp N>;
              )
             ZMK_MACRO(string_what,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp W>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp A &kp T>;
              )
              ZMK_MACRO(string_had,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp H>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp A &kp D>;
              )
             ZMK_MACRO(string_who,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp W>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp O>;
              )
             ZMK_MACRO(string_the,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp E>;
              )
             ZMK_MACRO(string_there,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp E &kp R &kp E>;
              )
             ZMK_MACRO(string_you,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp Y>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp U>;
              )
             ZMK_MACRO(string_vim,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp V>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp  &kp E>;
              )
             ZMK_MACRO(string_and,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp A>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp N &kp D>;
              )
             ZMK_MACRO(string_star,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp S>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp T &kp A &kp R>;
              )
             ZMK_MACRO(string_cluster,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp C>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp L &kp U &kp S &kp T &kp E &kp R>;
              )
             ZMK_MACRO(string_for,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp F>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp R>;
              )
             ZMK_MACRO(string_how,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp H>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp W>;
              )
             ZMK_MACRO(string_wq,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp COLON &kp W &kp Q >;
              )
             ZMK_MACRO(string_while,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp W>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp I &kp L &kp E>;
              )
             ZMK_MACRO(string_ing,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp I>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp N &kp G>;
              )
             ZMK_MACRO(string_just,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp J>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp &kp S &kp T &kp E  &kp R>;
              )
             ZMK_MACRO(string_ight,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp I>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp G &kp H &kp T>;
              )

             ZMK_MACRO(string_ough,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp O>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp G &kp H >;
              )

             ZMK_MACRO(string_ion, 
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp I>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp N>;
              )

             ZMK_MACRO(string_those,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp O &kp S &kp E>;
              )

             ZMK_MACRO(string_particle,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp P>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp A &kp R &kp T &kp I &kp C &kp L &kp E>;
              )

             ZMK_MACRO(string_hydrodynamics,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp H>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp Y &kp D &kp R &kp O &kp D &kp Y &kp N &kp A &kp M &kp I &kp C &kp S>;
              )

             ZMK_MACRO(string_interest,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp I>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp N &kp T &kp E &kp R &kp E &kp S &kp T>;
              )
             ZMK_MACRO(string_ould,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp O>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp L &kp D>;
              )
             ZMK_MACRO(string_first,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp F>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp I &kp R &kp S &kp T>;
              )
             ZMK_MACRO(string_have,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp H>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp A &kp V &kp E>;
              )
             ZMK_MACRO(string_that,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp A &kp T>;
              )
             ZMK_MACRO(string_which,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp W>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp I &kp C &kp H>;
              )
             ZMK_MACRO(string_make,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp M>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp A &kp K &kp E>;
              )
             ZMK_MACRO(string_function,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp F>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp N &kp C &kp T &kp I &kp O &kp N>;
              )
             ZMK_MACRO(string_real,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp R>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp E &kp A &kp L>;
              )
             ZMK_MACRO(string_take,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp A &kp K &kp E>;
              )
             ZMK_MACRO(string_good,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp G>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp O &kp D>;
              )
             ZMK_MACRO(string_print,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp P>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp R &kp I &kp N &kp T>;
              )
             ZMK_MACRO(string_ause,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp A>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp S &kp E>;
              )
             ZMK_MACRO(string_this,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp T>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp H &kp I &kp S>;
              )
             ZMK_MACRO(string_ound,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp O>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp U &kp N &kp D>;
              )
             ZMK_MACRO(string_done,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp D>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp O &kp N &kp E>;
              )
             ZMK_MACRO(string_with,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&kp W>
              , <&macro_release &kp LSHIFT>
              , <macro_tap &kp I &kp T &kp H>;
              )
             ZMK_MACRO(combo_ctrlC,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&macro_press &kp LCTRL>
              ,<&macro_tap &kp C>
              ,<&macro_release &kp LCTRL>;
              )
             ZMK_MACRO(combo_ctrlV,
              wait-ms = <10>;
              tap-ms = <5>;
              bindings =<&macro_press &kp LCTRL>
              ,<&macro_tap &kp V>
              ,<&macro_release &kp LCTRL>;
              )
             };
     keymap { 
             compatible = "zmk,keymap";

             arstneio {
             bindings = < 
             &mt N1 A &mt N2 R &mt N3 S  &mt N4 T  &mt N5 N &mt N6 E  &mt N6 I  &mt N8 O
                                &lt nav SPACE &sk LSHIFT
             >;
             };
             num {
             bindings = <
             &mt F1 N1 &mt F2 N2 &mt F3 N3 &mt F4 N4 &mt F5 N5 &mt F6 N6 &mt F7 N7 &mt F8 N8
                                   &trans &trans
            >;
            };
            nav {
            bindings = <
            &string_sim &none &none &none &kp LEFT &kp UP &kp DOWN &kp RIGHT
                               &trans &trans
            >;
            };
            media {
            bindings = <
            &none &none &none &none &kp C_PREV &kp C_VOLUME_UP &kp C_VOLUME_DOWN &kp C_NEXT
                              &none &none
            >;
            };
            blt {
            bindings = <
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_PRV &none &none &none
                              &none &none
            >;
            };
     };
     };
