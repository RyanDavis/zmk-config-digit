#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "util.h"
&lt {
    tapping-term-ms = <150>;
    quick-tap-ms = <100>;
    flavor = "hold-preferred";
    };
&mt {
    tapping-term-ms = <150>;
    flavor = "hold-preferred";
    };
&sk {
    release-after-ms = <10000>;
    quick-release;
    };

#define arstneio 0
#define num 1
#define nav 2
#define vim 3
#define media 4 
#define blt 5
/ {
    combos {
            compatible ="zmk,combos";
            combo_num {
               timeout-ms = <30>;
               key-positions = <0 1 2 3>;
               bindings = <&to num>;
            };
            combo_nav {
               timeout-ms = <30>;
               key-positions = <4 5 6 7>;
               bindings = <&to nav>;
            };
            combo_vim {
               timeout-ms = <30>;
               key-positions = <3 5 6>;
               bindings = <&to vim>;
            };
            combo_media {
               timeout-ms = <30>;
               key-positions = <0 1 2 3 4 5 6 7 8 9 0>;
               bindings = <&to media>;
            };
               combo_blt {
               timeout-ms = <30>;
               key-positions = <3 4 8 9>;
               bindings = <&to blt>;
            };    
             combo_ent {
                timeout-ms = <30>;
                key-positions = <8 9>;
                bindings = <&mt ENTER ESC>;
            };
             combo_alt {
               timeout-ms = <30>;
               key-positions = <0 3 8>;
               bindings = <&kt LALT>;
            };
             combo_back {
               timeout-ms = <30>;
               key-positions = <0 7>;
               bindings = <&kp BSPC>;
            };
              combo_rst {
               timeout-ms = <30>;
               key-positions = <0 1 2 3 4 5 6  7>;
               bindings = <&reset>;
            };
              combo_bsword {
               timeout-ms = <30>;
               key-positions = <0 7 9>;
               bindings = <&kp LC(BSPC)>;
            };
            combo_ctrl {
               timeout-ms = <30>;
               key-positions = <1 3 8>;
               bindings = <&kt LCTRL>;
            };
               combo_tab {
               timeout-ms = <30>;
               key-positions = <2 3 8>;
               bindings = <&kp TAB>;
            };
               combo_win {
               timeout-ms = <30>;
               key-positions = <0 1 8>;
               bindings = <&kp LGUI>;
            };
               combo_comma {
               timeout-ms = <30>;
               key-positions = <2 5>;
               bindings = <&kp COMMA>;
            };
               
               string_sim {
               timeout-ms = <20>;
               key-positions = <2 4 6>;
               layers = <arstneio vim>;
               bindings = <&string_sim>;
            };
            COMBO(dot, &kp DOT, 1 7)
            COMBO(scln, &kp COLON, 6 7)
            COMBO(ww, &kp W, 0 1)
            COMBO(xx, &kp X, 0 2)
            COMBOL(pp, &kp P,arstneio, 0 3)
            COMBO(jj, &kp J, 0 4)
            COMBO(qq, &kp Q, 0 5)
            COMBO(lbrac, &kp LPAR, 0 6)
            COMBO(ff, &kp F, 1 2)
            COMBO(cc, &kp C, 1 3)
            COMBO(kk, &kc K, 1 4)
            COMBO(zz, &kc Z, 1 5)
            COMBO(rbrac, &kp RPAR, 1 7)
            COMBO(dd, &kp D, 2 3)
            COMBO(mm, &kp M, 2 4)
            COMBO(minus, &kp MINUS, 2 6)
            COMBO(apos, &kp APOS, 2 7)
            COMBOL(bb, &mt N9 B,arstneio, 3 4)

            COMBOL(bb, &mt F9 N9,num, 3 4)
            COMBOL(vv, &mt N0 V,arstneio, 3 5)
            COMBOL(vv, &mt F10 N0,media, 3 5)
            COMBO(gg, &kp G, 3 6)
            COMBO(quest, &mt EQUAL QMARK, 3 7)
            COMBO(hh, &mt NON_US_HASH H, 4 5)
            COMBO(yy, &kp Y, 4 6)
            COMBO(ll, &kp L, 4 7)
            COMBO(exc, &kp EXCL, 5 7)
            COMBO(slash, &kp SLASH, 2 4 7)
            COMBO(bslash, &kp BSLH, 2 4 7 8)
            COMBO(home, &kp HOME, 4 9)
            COMBO(end, &kp END, 7 9)
            COMBO(ribr, &kp RBKT, 1 7 8)
            COMBO(lebr, &kp LBKT, 0 6 8)
            COMBOL(play, &kp C_PLAY, media, 0 3)
            COMBOL(mute, &kp C_MUTE, media, 2 4)

    };

     behaviors {
             ZMK_MACRO(string_sim,
              wait-ms = <10>;
              tap-ms = <10>;
              bindings =<&kp S &kp I &kp M &kp U &kp L &kp A &kp T &kp I &kp O &kp N>;
              )
             };
     keymap { 
             compatible = "zmk,keymap";

             arstneio {
             bindings = < 
             &mt N1 A &mt N2 R &mt N3 S  &mt N4 T  &mt N5 N &mt N6 E  &mt N6 I  &mt N8 O
                                &lt nav SPACE &sk LSHIFT
             >;
             };
             num {
             bindings = <
             &mt F1 N1 &mt F2 N2 &mt F3 N3 &mt F4 N4 &mt F5 N5 &mt F6 N6 &mt F7 N7 &mt F8 N8
                                   &trans &trans
            >;
            };
            nav {
            bindings = <
            &none &none &none &none &kp LEFT &kp UP &kp DOWN &kp RIGHT
                               &trans &trans
            >;
            };
            media {
            bindings = <
            &none &none &none &none &kp C_PREV &kp C_VOLUME_UP &kp C_VOLUME_DOWN &kp C_NEXT
                              &none &none
            >;
            };
            blt {
            bindings = <
            &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_PRV &none &none &none
                              &none &none
            >;
            };
     };
     };
